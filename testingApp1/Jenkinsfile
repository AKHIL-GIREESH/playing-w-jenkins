pipeline {
    agent any

    tools {
        nodejs "23.5.0"
        // sonarqube "sonarqube-710"
    }

    environment {
        PROJECT_DIR = "testingApp1"
        SONNAR_SCANNER_HOME = tool 'sonarqube-710'
    }

    stages {
        stage("Installing Dependencies") {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        pwd
                        npm i --no-audit
                    '''
                }
            }
        }

        stage("Dependency Scanning") {
            parallel {
                stage("NPM Dependency Audit") {
                    steps {
                        dir("${PROJECT_DIR}") {
                            // sh "npm audit --audit-level=critical"
                            sh "npm audit --audit-level=critical"
                        }
                    }
                }

                stage("OWASP Dependency Check") {
                    steps {
                        dir("${PROJECT_DIR}") {
                            dependencyCheck additionalArguments: '''
                                --scan \'./\'
                                --out \'./\'
                                --format \'ALL\'
                                --prettyPrint''', odcInstallation: 'OWASP-DepCheck-12'
                        }
                    }
                }
            }
        }

        stage('Unit Testing'){
            steps{
                dir("${PROJECT_DIR}") {
                        sh 'npx vitest'
                }
            }
        }

        stage('Code Coverage'){
            steps{
                dir("${PROJECT_DIR}"){
                    catchError(buildResult: 'SUCCESS', message: 'Coverage less than threshold', stageResult: 'UNSTABLE') {
                        sh 'npx vitest run --coverage'
                    }
                }
            }
        }

        // stage('SAST - SonarQube'){
        //     steps{
        //         dir("${PROJECT_DIR}"){
        //             sh 'echo $SONARY_SCANNER_HOME'
        //             sh '''
        //                 $SONNAR_SCANNER_HOME/bin/sonar-scanner \
        //                     -Dsonar.projectKey=reactTesting \
        //                     -Dsonar.sources=. \
        //                     -Dsonar.host.url=$SONAR_HOST_URL \
        //                     -Dsonar.token=$SONAR_AUTH_TOKEN
        //             '''
        //         }
        //     }
        // }

        stage("Docker Build Image"){
            steps{
               dir("${PROJECT_DIR}"){
                    sh 'docker build -t akhilgireesh/reacttestingnew:$GIT_COMMIT .'
                } 
            }
        }

        stage("Push Docker Image") {
            steps {
                dir("${PROJECT_DIR}") {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push akhilgireesh/reacttestingnew:$GIT_COMMIT
                        '''
                    }
                }
            }
        }
    }

    post{
        always{
            junit allowEmptyResults: true, testResults: 'test-results.xml'
        }
    }
}